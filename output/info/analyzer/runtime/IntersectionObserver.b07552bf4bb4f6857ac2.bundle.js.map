{"version":3,"sources":["webpack://bundle_client/IntersectionObserver.ts","webpack://bundle_client/wrapper.ts","webpack://bundle_client/./node_modules/intersection-observer/intersection-observer.js"],"names":["__webpack_require__","r","__webpack_exports__","_util_wrapper__WEBPACK_IMPORTED_MODULE_1__","Object","d","wrapper","_global__WEBPACK_IMPORTED_MODULE_0__","nameOnGlobal","constructor","bind","window","document","IntersectionObserverEntry","prototype","defineProperty","get","this","intersectionRatio","registry","IntersectionObserver","THROTTLE_TIMEOUT","POLL_INTERVAL","observe","target","_observationTargets","some","item","element","nodeType","Error","_registerInstance","push","entry","_monitorIntersections","_checkForIntersections","unobserve","filter","length","_unmonitorIntersections","_unregisterInstance","disconnect","takeRecords","records","_queuedEntries","slice","_initThresholds","opt_threshold","threshold","Array","isArray","sort","t","i","a","isNaN","_parseRootMargin","opt_rootMargin","margins","split","map","margin","parts","exec","value","parseFloat","unit","_monitoringIntersections","_monitoringInterval","setInterval","addEvent","_domObserver","MutationObserver","attributes","childList","characterData","subtree","clearInterval","removeEvent","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","top","bottom","left","right","width","height","forEach","targetRect","getBoundingClientRect","rootContainsTarget","_rootContainsTarget","oldEntry","intersectionRect","_computeTargetAndRootIntersection","newEntry","time","performance","now","boundingClientRect","rootBounds","_hasCrossedThreshold","isIntersecting","_callback","getComputedStyle","display","rect1","rect2","parent","getParentNode","atRoot","parentRect","parentComputedStyle","root","body","documentElement","overflow","Math","max","min","html","clientWidth","clientHeight","_expandRectByRootMargin","rect","_rootMarginValues","newRect","oldRatio","newRatio","thresholds","containsDeep","indexOf","index","splice","targetArea","intersectionArea","callback","opt_options","fn","timeout","timer","options","setTimeout","rootMargin","join","node","event","opt_useCapture","addEventListener","attachEvent","removeEventListener","detatchEvent","el","err","child","parentNode","host"],"mappings":"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","file":"runtime/IntersectionObserver.b07552bf4bb4f6857ac2.bundle.js","sourcesContent":["`!has('build-elide')`;\nimport 'intersection-observer';\nimport wrapper from './util/wrapper';\n\nexport default wrapper('IntersectionObserver', true) as typeof IntersectionObserver;\n","import global from '../global';\nimport has from '../../core/has';\n\nexport default function wrapper(nameOnGlobal: string, constructor = false, bind = false): any {\n\tif (has('test')) {\n\t\tif (constructor) {\n\t\t\treturn function(...args: any[]) {\n\t\t\t\treturn new global[nameOnGlobal](...args);\n\t\t\t};\n\t\t} else {\n\t\t\treturn function(...args: any[]) {\n\t\t\t\treturn global[nameOnGlobal](...args);\n\t\t\t};\n\t\t}\n\t}\n\n\treturn bind ? global[nameOnGlobal].bind(global) : global[nameOnGlobal];\n}\n","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function(window, document) {\n'use strict';\n\n\n// Exits early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/WICG/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observering a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://wicg.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = entry.rootBounds;\n  this.boundingClientRect = entry.boundingClientRect;\n  this.intersectionRect = entry.intersectionRect || getEmptyRect();\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    this.intersectionRatio = intersectionArea / targetArea;\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://wicg.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  // If the target is already being observed, do nothing.\n  if (this._observationTargets.some(function(item) {\n    return item.element == target;\n  })) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections();\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n\n    return item.element != target;\n  });\n  if (!this._observationTargets.length) {\n    this._unmonitorIntersections();\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibilty state is visible.\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function() {\n  if (!this._monitoringIntersections) {\n    this._monitoringIntersections = true;\n\n    // If a poll interval is set, use polling instead of listening to\n    // resize and scroll events or DOM mutations.\n    if (this.POLL_INTERVAL) {\n      this._monitoringInterval = setInterval(\n          this._checkForIntersections, this.POLL_INTERVAL);\n    }\n    else {\n      addEvent(window, 'resize', this._checkForIntersections, true);\n      addEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if ('MutationObserver' in window) {\n        this._domObserver = new MutationObserver(this._checkForIntersections);\n        this._domObserver.observe(document, {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n      }\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function() {\n  if (this._monitoringIntersections) {\n    this._monitoringIntersections = false;\n\n    clearInterval(this._monitoringInterval);\n    this._monitoringInterval = null;\n\n    removeEvent(window, 'resize', this._checkForIntersections, true);\n    removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n    if (this._domObserver) {\n      this._domObserver.disconnect();\n      this._domObserver = null;\n    }\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://wicg.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, rootRect) {\n\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var targetRect = getBoundingClientRect(target);\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return;\n\n    if (parent == this.root || parent == document) {\n      atRoot = true;\n      parentRect = rootRect;\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      if (parent != document.body &&\n          parent != document.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n\n      if (!intersectionRect) break;\n    }\n    parent = getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {Object} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {Object} rect The rect object to expand.\n * @return {Object} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its executiong, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object} The intersection rect or undefined if no intersection\n *     is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  };\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {Object} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/WICG/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {Object} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n/**\n * Checks to see if a parent element contains a child elemnt (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n  return parent;\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}(window, document));\n"],"sourceRoot":""}