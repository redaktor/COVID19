{"version":3,"sources":["webpack://bundle_client/pointerEvents.ts","webpack://bundle_client/./node_modules/pepjs/dist/pep.js"],"names":["__webpack_require__","r","__webpack_exports__","module","exports","MOUSE_PROPS","MOUSE_DEFAULTS","PointerEvent","inType","inDict","Object","create","e","document","createEvent","initEvent","bubbles","cancelable","p","i","length","buttons","pressure","x","clientX","y","clientY","pointerId","width","height","tiltX","tiltY","pointerType","hwTimestamp","isPrimary","PointerMap","window","Map","prototype","forEach","SparseArrayMap","this","array","size","set","k","v","undefined","delete","has","get","clear","callback","thisArg","call","CLONE_PROPS","CLONE_DEFAULTS","BOUNDARY_EVENTS","pointerover","pointerout","pointerenter","pointerleave","HAS_SVG_INSTANCE","SVGElementInstance","dispatcher","pointermap","eventMap","captureInfo","eventSources","eventSourceList","registerSource","name","source","s","newEvents","events","bind","push","register","element","es","l","unregister","contains","container","contained","ex","down","inEvent","fireEvent","move","up","enter","leave","over","out","cancel","leaveOut","event","propagate","enterOver","eventHandler","_handledByPE","type","fn","listen","target","addEvent","unlisten","removeEvent","eventName","addEventListener","boundHandler","removeEventListener","makeEvent","relatedTarget","preventDefault","_target","dispatchEvent","cloneEvent","eventCopy","correspondingUseElement","getTarget","capture","propagateDown","targets","parentNode","reverse","setCapture","inPointerId","inTarget","releaseCapture","implicitRelease","asyncDispatchEvent","t","requestAnimationFrame","targeting","shadow","inEl","shadowRoot","webkitShadowRoot","canTarget","Boolean","elementFromPoint","targetingShadow","olderShadow","os","olderShadowRoot","se","querySelector","allShadows","shadows","searchRoot","inRoot","st","sr","ssr","owner","nodeType","Node","DOCUMENT_NODE","DOCUMENT_FRAGMENT_NODE","findTarget","Array","map","toArray","slice","filter","MO","MutationObserver","WebKitMutationObserver","OBSERVER_INIT","subtree","childList","attributes","attributeOldValue","attributeFilter","Installer","add","remove","changed","binder","addCallback","removeCallback","changedCallback","observer","mutationWatcher","shadowSelector","selector","rule","watchSubtree","observe","enableOnSubtree","readyState","installOnLoad","installNewSubtree","findElements","addElement","querySelectorAll","removeElement","el","elementChanged","oldValue","concatLists","accum","list","concat","isElement","n","ELEMENT_NODE","flattenMutationTree","inNodes","tree","reduce","mutations","mutationHandler","m","added","addedNodes","removed","removedNodes","attrib2css","selectors","styles","hasNativePE","MSPointerEvent","hasShadowRoot","ShadowDOMPolyfill","head","createShadowRoot","BUTTON_TO_BUTTONS","HAS_BUTTONS","MouseEvent","INSTALLER","mouseEvents","POINTER_ID","POINTER_TYPE","lastTouches","isEventSimulatedFromTouch","lts","dx","Math","abs","dy","prepareEvent","pd","prepareButtonsForMove","which","mousedown","button","mousemove","mouseup","mouseover","mouseout","deactivateMouse","pointermap$1","touchEvents","elementAdded","a","getAttribute","touchActionToScrollType","_scrollType","elementRemoved","oldSt","scrollTypes","EMITTER","XSCROLLER","YSCROLLER","SCROLLER","touchAction","exec","firstTouch","isPrimaryTouch","inTouch","identifier","setPrimaryTouch","firstXY","X","Y","scrolling","cancelResetClickCount","removePrimaryPointer","inPointer","resetClickCount","clickCount","resetId","setTimeout","clearTimeout","typeToButtons","ret","touchToPointer","cte","currentTouchEvent","id","detail","radiusX","webkitRadiusX","radiusY","webkitRadiusY","force","webkitForce","altKey","ctrlKey","metaKey","shiftKey","self","processTouches","inFunction","tl","changedTouches","shouldScroll","scrollAxis","currentTarget","oa","da","doa","findTouch","inTL","inId","vacuumTouches","touches","d","value","key","cancelOut","touchstart","dedupSynthMouse","overDown","outTarget","touchmove","touchcancel","moveOverOut","pointer","outEvent","touchend","upOut","cleanUpPointer","lt","indexOf","splice","pointermap$2","HAS_BITMAP_TYPE","MSPOINTER_TYPE_MOUSE","msEvents","POINTER_TYPES","cleanup","MSPointerDown","MSPointerMove","MSPointerUp","MSPointerOut","MSPointerOver","MSPointerCancel","MSLostPointerCapture","MSGotPointerCapture","assertActive","error","Error","assertConnected","elem","ownerDocument","inActiveButtonState","navigator","msPointerEnabled","msSetPointerCapture","msReleasePointerCapture","String","createElement","textContent","appendChild","applyAttributeStyles","tp","msMaxTouchPoints","defineProperty","enumerable","ontouchstart","applyPolyfill","Element","setPointerCapture","defineProperties","releasePointerCapture","targetFinding","factory"],"mappings":"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","file":"runtime/pointerEvents.ba03a24b846627391b36.bundle.js","sourcesContent":["`!has('build-elide')`;\nimport 'pepjs';\n","/*!\n * PEP v0.4.2 | https://github.com/jquery/PEP\n * Copyright jQuery Foundation and other contributors | http://jquery.org/license\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.PointerEventsPolyfill = factory());\n}(this, function () { 'use strict';\n\n  /**\n   * This is the constructor for new PointerEvents.\n   *\n   * New Pointer Events must be given a type, and an optional dictionary of\n   * initialization properties.\n   *\n   * Due to certain platform requirements, events returned from the constructor\n   * identify as MouseEvents.\n   *\n   * @constructor\n   * @param {String} inType The type of the event to create.\n   * @param {Object} [inDict] An optional dictionary of initial event properties.\n   * @return {Event} A new PointerEvent of type `inType`, initialized with properties from `inDict`.\n   */\n  var MOUSE_PROPS = [\n    'bubbles',\n    'cancelable',\n    'view',\n    'detail',\n    'screenX',\n    'screenY',\n    'clientX',\n    'clientY',\n    'ctrlKey',\n    'altKey',\n    'shiftKey',\n    'metaKey',\n    'button',\n    'relatedTarget',\n    'pageX',\n    'pageY'\n  ];\n\n  var MOUSE_DEFAULTS = [\n    false,\n    false,\n    null,\n    null,\n    0,\n    0,\n    0,\n    0,\n    false,\n    false,\n    false,\n    false,\n    0,\n    null,\n    0,\n    0\n  ];\n\n  function PointerEvent(inType, inDict) {\n    inDict = inDict || Object.create(null);\n\n    var e = document.createEvent('Event');\n    e.initEvent(inType, inDict.bubbles || false, inDict.cancelable || false);\n\n    // define inherited MouseEvent properties\n    // skip bubbles and cancelable since they're set above in initEvent()\n    for (var i = 2, p; i < MOUSE_PROPS.length; i++) {\n      p = MOUSE_PROPS[i];\n      e[p] = inDict[p] || MOUSE_DEFAULTS[i];\n    }\n    e.buttons = inDict.buttons || 0;\n\n    // Spec requires that pointers without pressure specified use 0.5 for down\n    // state and 0 for up state.\n    var pressure = 0;\n\n    if (inDict.pressure && e.buttons) {\n      pressure = inDict.pressure;\n    } else {\n      pressure = e.buttons ? 0.5 : 0;\n    }\n\n    // add x/y properties aliased to clientX/Y\n    e.x = e.clientX;\n    e.y = e.clientY;\n\n    // define the properties of the PointerEvent interface\n    e.pointerId = inDict.pointerId || 0;\n    e.width = inDict.width || 0;\n    e.height = inDict.height || 0;\n    e.pressure = pressure;\n    e.tiltX = inDict.tiltX || 0;\n    e.tiltY = inDict.tiltY || 0;\n    e.pointerType = inDict.pointerType || '';\n    e.hwTimestamp = inDict.hwTimestamp || 0;\n    e.isPrimary = inDict.isPrimary || false;\n    return e;\n  }\n\n  /**\n   * This module implements a map of pointer states\n   */\n  var USE_MAP = window.Map && window.Map.prototype.forEach;\n  var PointerMap = USE_MAP ? Map : SparseArrayMap;\n\n  function SparseArrayMap() {\n    this.array = [];\n    this.size = 0;\n  }\n\n  SparseArrayMap.prototype = {\n    set: function(k, v) {\n      if (v === undefined) {\n        return this.delete(k);\n      }\n      if (!this.has(k)) {\n        this.size++;\n      }\n      this.array[k] = v;\n    },\n    has: function(k) {\n      return this.array[k] !== undefined;\n    },\n    delete: function(k) {\n      if (this.has(k)) {\n        delete this.array[k];\n        this.size--;\n      }\n    },\n    get: function(k) {\n      return this.array[k];\n    },\n    clear: function() {\n      this.array.length = 0;\n      this.size = 0;\n    },\n\n    // return value, key, map\n    forEach: function(callback, thisArg) {\n      return this.array.forEach(function(v, k) {\n        callback.call(thisArg, v, k, this);\n      }, this);\n    }\n  };\n\n  var CLONE_PROPS = [\n\n    // MouseEvent\n    'bubbles',\n    'cancelable',\n    'view',\n    'detail',\n    'screenX',\n    'screenY',\n    'clientX',\n    'clientY',\n    'ctrlKey',\n    'altKey',\n    'shiftKey',\n    'metaKey',\n    'button',\n    'relatedTarget',\n\n    // DOM Level 3\n    'buttons',\n\n    // PointerEvent\n    'pointerId',\n    'width',\n    'height',\n    'pressure',\n    'tiltX',\n    'tiltY',\n    'pointerType',\n    'hwTimestamp',\n    'isPrimary',\n\n    // event instance\n    'type',\n    'target',\n    'currentTarget',\n    'which',\n    'pageX',\n    'pageY',\n    'timeStamp'\n  ];\n\n  var CLONE_DEFAULTS = [\n\n    // MouseEvent\n    false,\n    false,\n    null,\n    null,\n    0,\n    0,\n    0,\n    0,\n    false,\n    false,\n    false,\n    false,\n    0,\n    null,\n\n    // DOM Level 3\n    0,\n\n    // PointerEvent\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    '',\n    0,\n    false,\n\n    // event instance\n    '',\n    null,\n    null,\n    0,\n    0,\n    0,\n    0\n  ];\n\n  var BOUNDARY_EVENTS = {\n    'pointerover': 1,\n    'pointerout': 1,\n    'pointerenter': 1,\n    'pointerleave': 1\n  };\n\n  var HAS_SVG_INSTANCE = (typeof SVGElementInstance !== 'undefined');\n\n  /**\n   * This module is for normalizing events. Mouse and Touch events will be\n   * collected here, and fire PointerEvents that have the same semantics, no\n   * matter the source.\n   * Events fired:\n   *   - pointerdown: a pointing is added\n   *   - pointerup: a pointer is removed\n   *   - pointermove: a pointer is moved\n   *   - pointerover: a pointer crosses into an element\n   *   - pointerout: a pointer leaves an element\n   *   - pointercancel: a pointer will no longer generate events\n   */\n  var dispatcher = {\n    pointermap: new PointerMap(),\n    eventMap: Object.create(null),\n    captureInfo: Object.create(null),\n\n    // Scope objects for native events.\n    // This exists for ease of testing.\n    eventSources: Object.create(null),\n    eventSourceList: [],\n    /**\n     * Add a new event source that will generate pointer events.\n     *\n     * `inSource` must contain an array of event names named `events`, and\n     * functions with the names specified in the `events` array.\n     * @param {string} name A name for the event source\n     * @param {Object} source A new source of platform events.\n     */\n    registerSource: function(name, source) {\n      var s = source;\n      var newEvents = s.events;\n      if (newEvents) {\n        newEvents.forEach(function(e) {\n          if (s[e]) {\n            this.eventMap[e] = s[e].bind(s);\n          }\n        }, this);\n        this.eventSources[name] = s;\n        this.eventSourceList.push(s);\n      }\n    },\n    register: function(element) {\n      var l = this.eventSourceList.length;\n      for (var i = 0, es; (i < l) && (es = this.eventSourceList[i]); i++) {\n\n        // call eventsource register\n        es.register.call(es, element);\n      }\n    },\n    unregister: function(element) {\n      var l = this.eventSourceList.length;\n      for (var i = 0, es; (i < l) && (es = this.eventSourceList[i]); i++) {\n\n        // call eventsource register\n        es.unregister.call(es, element);\n      }\n    },\n    contains: /*scope.external.contains || */function(container, contained) {\n      try {\n        return container.contains(contained);\n      } catch (ex) {\n\n        // most likely: https://bugzilla.mozilla.org/show_bug.cgi?id=208427\n        return false;\n      }\n    },\n\n    // EVENTS\n    down: function(inEvent) {\n      inEvent.bubbles = true;\n      this.fireEvent('pointerdown', inEvent);\n    },\n    move: function(inEvent) {\n      inEvent.bubbles = true;\n      this.fireEvent('pointermove', inEvent);\n    },\n    up: function(inEvent) {\n      inEvent.bubbles = true;\n      this.fireEvent('pointerup', inEvent);\n    },\n    enter: function(inEvent) {\n      inEvent.bubbles = false;\n      this.fireEvent('pointerenter', inEvent);\n    },\n    leave: function(inEvent) {\n      inEvent.bubbles = false;\n      this.fireEvent('pointerleave', inEvent);\n    },\n    over: function(inEvent) {\n      inEvent.bubbles = true;\n      this.fireEvent('pointerover', inEvent);\n    },\n    out: function(inEvent) {\n      inEvent.bubbles = true;\n      this.fireEvent('pointerout', inEvent);\n    },\n    cancel: function(inEvent) {\n      inEvent.bubbles = true;\n      this.fireEvent('pointercancel', inEvent);\n    },\n    leaveOut: function(event) {\n      this.out(event);\n      this.propagate(event, this.leave, false);\n    },\n    enterOver: function(event) {\n      this.over(event);\n      this.propagate(event, this.enter, true);\n    },\n\n    // LISTENER LOGIC\n    eventHandler: function(inEvent) {\n\n      // This is used to prevent multiple dispatch of pointerevents from\n      // platform events. This can happen when two elements in different scopes\n      // are set up to create pointer events, which is relevant to Shadow DOM.\n      if (inEvent._handledByPE) {\n        return;\n      }\n      var type = inEvent.type;\n      var fn = this.eventMap && this.eventMap[type];\n      if (fn) {\n        fn(inEvent);\n      }\n      inEvent._handledByPE = true;\n    },\n\n    // set up event listeners\n    listen: function(target, events) {\n      events.forEach(function(e) {\n        this.addEvent(target, e);\n      }, this);\n    },\n\n    // remove event listeners\n    unlisten: function(target, events) {\n      events.forEach(function(e) {\n        this.removeEvent(target, e);\n      }, this);\n    },\n    addEvent: /*scope.external.addEvent || */function(target, eventName) {\n      target.addEventListener(eventName, this.boundHandler);\n    },\n    removeEvent: /*scope.external.removeEvent || */function(target, eventName) {\n      target.removeEventListener(eventName, this.boundHandler);\n    },\n\n    // EVENT CREATION AND TRACKING\n    /**\n     * Creates a new Event of type `inType`, based on the information in\n     * `inEvent`.\n     *\n     * @param {string} inType A string representing the type of event to create\n     * @param {Event} inEvent A platform event with a target\n     * @return {Event} A PointerEvent of type `inType`\n     */\n    makeEvent: function(inType, inEvent) {\n\n      // relatedTarget must be null if pointer is captured\n      if (this.captureInfo[inEvent.pointerId]) {\n        inEvent.relatedTarget = null;\n      }\n      var e = new PointerEvent(inType, inEvent);\n      if (inEvent.preventDefault) {\n        e.preventDefault = inEvent.preventDefault;\n      }\n      e._target = e._target || inEvent.target;\n      return e;\n    },\n\n    // make and dispatch an event in one call\n    fireEvent: function(inType, inEvent) {\n      var e = this.makeEvent(inType, inEvent);\n      return this.dispatchEvent(e);\n    },\n    /**\n     * Returns a snapshot of inEvent, with writable properties.\n     *\n     * @param {Event} inEvent An event that contains properties to copy.\n     * @return {Object} An object containing shallow copies of `inEvent`'s\n     *    properties.\n     */\n    cloneEvent: function(inEvent) {\n      var eventCopy = Object.create(null);\n      var p;\n      for (var i = 0; i < CLONE_PROPS.length; i++) {\n        p = CLONE_PROPS[i];\n        eventCopy[p] = inEvent[p] || CLONE_DEFAULTS[i];\n\n        // Work around SVGInstanceElement shadow tree\n        // Return the <use> element that is represented by the instance for Safari, Chrome, IE.\n        // This is the behavior implemented by Firefox.\n        if (HAS_SVG_INSTANCE && (p === 'target' || p === 'relatedTarget')) {\n          if (eventCopy[p] instanceof SVGElementInstance) {\n            eventCopy[p] = eventCopy[p].correspondingUseElement;\n          }\n        }\n      }\n\n      // keep the semantics of preventDefault\n      if (inEvent.preventDefault) {\n        eventCopy.preventDefault = function() {\n          inEvent.preventDefault();\n        };\n      }\n      return eventCopy;\n    },\n    getTarget: function(inEvent) {\n      var capture = this.captureInfo[inEvent.pointerId];\n      if (!capture) {\n        return inEvent._target;\n      }\n      if (inEvent._target === capture || !(inEvent.type in BOUNDARY_EVENTS)) {\n        return capture;\n      }\n    },\n    propagate: function(event, fn, propagateDown) {\n      var target = event.target;\n      var targets = [];\n      while (!target.contains(event.relatedTarget) && target !== document) {\n        targets.push(target);\n        target = target.parentNode;\n      }\n      if (propagateDown) {\n        targets.reverse();\n      }\n      targets.forEach(function(target) {\n        event.target = target;\n        fn.call(this, event);\n      }, this);\n    },\n    setCapture: function(inPointerId, inTarget) {\n      if (this.captureInfo[inPointerId]) {\n        this.releaseCapture(inPointerId);\n      }\n      this.captureInfo[inPointerId] = inTarget;\n      var e = new PointerEvent('gotpointercapture');\n      e.pointerId = inPointerId;\n      this.implicitRelease = this.releaseCapture.bind(this, inPointerId);\n      document.addEventListener('pointerup', this.implicitRelease);\n      document.addEventListener('pointercancel', this.implicitRelease);\n      e._target = inTarget;\n      this.asyncDispatchEvent(e);\n    },\n    releaseCapture: function(inPointerId) {\n      var t = this.captureInfo[inPointerId];\n      if (t) {\n        var e = new PointerEvent('lostpointercapture');\n        e.pointerId = inPointerId;\n        this.captureInfo[inPointerId] = undefined;\n        document.removeEventListener('pointerup', this.implicitRelease);\n        document.removeEventListener('pointercancel', this.implicitRelease);\n        e._target = t;\n        this.asyncDispatchEvent(e);\n      }\n    },\n    /**\n     * Dispatches the event to its target.\n     *\n     * @param {Event} inEvent The event to be dispatched.\n     * @return {Boolean} True if an event handler returns true, false otherwise.\n     */\n    dispatchEvent: /*scope.external.dispatchEvent || */function(inEvent) {\n      var t = this.getTarget(inEvent);\n      if (t) {\n        return t.dispatchEvent(inEvent);\n      }\n    },\n    asyncDispatchEvent: function(inEvent) {\n      requestAnimationFrame(this.dispatchEvent.bind(this, inEvent));\n    }\n  };\n  dispatcher.boundHandler = dispatcher.eventHandler.bind(dispatcher);\n\n  var targeting = {\n    shadow: function(inEl) {\n      if (inEl) {\n        return inEl.shadowRoot || inEl.webkitShadowRoot;\n      }\n    },\n    canTarget: function(shadow) {\n      return shadow && Boolean(shadow.elementFromPoint);\n    },\n    targetingShadow: function(inEl) {\n      var s = this.shadow(inEl);\n      if (this.canTarget(s)) {\n        return s;\n      }\n    },\n    olderShadow: function(shadow) {\n      var os = shadow.olderShadowRoot;\n      if (!os) {\n        var se = shadow.querySelector('shadow');\n        if (se) {\n          os = se.olderShadowRoot;\n        }\n      }\n      return os;\n    },\n    allShadows: function(element) {\n      var shadows = [];\n      var s = this.shadow(element);\n      while (s) {\n        shadows.push(s);\n        s = this.olderShadow(s);\n      }\n      return shadows;\n    },\n    searchRoot: function(inRoot, x, y) {\n      if (inRoot) {\n        var t = inRoot.elementFromPoint(x, y);\n        var st, sr;\n\n        // is element a shadow host?\n        sr = this.targetingShadow(t);\n        while (sr) {\n\n          // find the the element inside the shadow root\n          st = sr.elementFromPoint(x, y);\n          if (!st) {\n\n            // check for older shadows\n            sr = this.olderShadow(sr);\n          } else {\n\n            // shadowed element may contain a shadow root\n            var ssr = this.targetingShadow(st);\n            return this.searchRoot(ssr, x, y) || st;\n          }\n        }\n\n        // light dom element is the target\n        return t;\n      }\n    },\n    owner: function(element) {\n      var s = element;\n\n      // walk up until you hit the shadow root or document\n      while (s.parentNode) {\n        s = s.parentNode;\n      }\n\n      // the owner element is expected to be a Document or ShadowRoot\n      if (s.nodeType !== Node.DOCUMENT_NODE && s.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {\n        s = document;\n      }\n      return s;\n    },\n    findTarget: function(inEvent) {\n      var x = inEvent.clientX;\n      var y = inEvent.clientY;\n\n      // if the listener is in the shadow root, it is much faster to start there\n      var s = this.owner(inEvent.target);\n\n      // if x, y is not in this root, fall back to document search\n      if (!s.elementFromPoint(x, y)) {\n        s = document;\n      }\n      return this.searchRoot(s, x, y);\n    }\n  };\n\n  var forEach = Array.prototype.forEach.call.bind(Array.prototype.forEach);\n  var map = Array.prototype.map.call.bind(Array.prototype.map);\n  var toArray = Array.prototype.slice.call.bind(Array.prototype.slice);\n  var filter = Array.prototype.filter.call.bind(Array.prototype.filter);\n  var MO = window.MutationObserver || window.WebKitMutationObserver;\n  var SELECTOR = '[touch-action]';\n  var OBSERVER_INIT = {\n    subtree: true,\n    childList: true,\n    attributes: true,\n    attributeOldValue: true,\n    attributeFilter: ['touch-action']\n  };\n\n  function Installer(add, remove, changed, binder) {\n    this.addCallback = add.bind(binder);\n    this.removeCallback = remove.bind(binder);\n    this.changedCallback = changed.bind(binder);\n    if (MO) {\n      this.observer = new MO(this.mutationWatcher.bind(this));\n    }\n  }\n\n  Installer.prototype = {\n    watchSubtree: function(target) {\n\n      // Only watch scopes that can target find, as these are top-level.\n      // Otherwise we can see duplicate additions and removals that add noise.\n      //\n      // TODO(dfreedman): For some instances with ShadowDOMPolyfill, we can see\n      // a removal without an insertion when a node is redistributed among\n      // shadows. Since it all ends up correct in the document, watching only\n      // the document will yield the correct mutations to watch.\n      if (this.observer && targeting.canTarget(target)) {\n        this.observer.observe(target, OBSERVER_INIT);\n      }\n    },\n    enableOnSubtree: function(target) {\n      this.watchSubtree(target);\n      if (target === document && document.readyState !== 'complete') {\n        this.installOnLoad();\n      } else {\n        this.installNewSubtree(target);\n      }\n    },\n    installNewSubtree: function(target) {\n      forEach(this.findElements(target), this.addElement, this);\n    },\n    findElements: function(target) {\n      if (target.querySelectorAll) {\n        return target.querySelectorAll(SELECTOR);\n      }\n      return [];\n    },\n    removeElement: function(el) {\n      this.removeCallback(el);\n    },\n    addElement: function(el) {\n      this.addCallback(el);\n    },\n    elementChanged: function(el, oldValue) {\n      this.changedCallback(el, oldValue);\n    },\n    concatLists: function(accum, list) {\n      return accum.concat(toArray(list));\n    },\n\n    // register all touch-action = none nodes on document load\n    installOnLoad: function() {\n      document.addEventListener('readystatechange', function() {\n        if (document.readyState === 'complete') {\n          this.installNewSubtree(document);\n        }\n      }.bind(this));\n    },\n    isElement: function(n) {\n      return n.nodeType === Node.ELEMENT_NODE;\n    },\n    flattenMutationTree: function(inNodes) {\n\n      // find children with touch-action\n      var tree = map(inNodes, this.findElements, this);\n\n      // make sure the added nodes are accounted for\n      tree.push(filter(inNodes, this.isElement));\n\n      // flatten the list\n      return tree.reduce(this.concatLists, []);\n    },\n    mutationWatcher: function(mutations) {\n      mutations.forEach(this.mutationHandler, this);\n    },\n    mutationHandler: function(m) {\n      if (m.type === 'childList') {\n        var added = this.flattenMutationTree(m.addedNodes);\n        added.forEach(this.addElement, this);\n        var removed = this.flattenMutationTree(m.removedNodes);\n        removed.forEach(this.removeElement, this);\n      } else if (m.type === 'attributes') {\n        this.elementChanged(m.target, m.oldValue);\n      }\n    }\n  };\n\n  function shadowSelector(v) {\n    return 'body /shadow-deep/ ' + selector(v);\n  }\n  function selector(v) {\n    return '[touch-action=\"' + v + '\"]';\n  }\n  function rule(v) {\n    return '{ -ms-touch-action: ' + v + '; touch-action: ' + v + '; }';\n  }\n  var attrib2css = [\n    'none',\n    'auto',\n    'pan-x',\n    'pan-y',\n    {\n      rule: 'pan-x pan-y',\n      selectors: [\n        'pan-x pan-y',\n        'pan-y pan-x'\n      ]\n    }\n  ];\n  var styles = '';\n\n  // only install stylesheet if the browser has touch action support\n  var hasNativePE = window.PointerEvent || window.MSPointerEvent;\n\n  // only add shadow selectors if shadowdom is supported\n  var hasShadowRoot = !window.ShadowDOMPolyfill && document.head.createShadowRoot;\n\n  function applyAttributeStyles() {\n    if (hasNativePE) {\n      attrib2css.forEach(function(r) {\n        if (String(r) === r) {\n          styles += selector(r) + rule(r) + '\\n';\n          if (hasShadowRoot) {\n            styles += shadowSelector(r) + rule(r) + '\\n';\n          }\n        } else {\n          styles += r.selectors.map(selector) + rule(r.rule) + '\\n';\n          if (hasShadowRoot) {\n            styles += r.selectors.map(shadowSelector) + rule(r.rule) + '\\n';\n          }\n        }\n      });\n\n      var el = document.createElement('style');\n      el.textContent = styles;\n      document.head.appendChild(el);\n    }\n  }\n\n  var pointermap = dispatcher.pointermap;\n\n  // radius around touchend that swallows mouse events\n  var DEDUP_DIST = 25;\n\n  // left, middle, right, back, forward\n  var BUTTON_TO_BUTTONS = [1, 4, 2, 8, 16];\n\n  var HAS_BUTTONS = false;\n  try {\n    HAS_BUTTONS = new MouseEvent('test', { buttons: 1 }).buttons === 1;\n  } catch (e) {}\n\n  // handler block for native mouse events\n  var mouseEvents = {\n    POINTER_ID: 1,\n    POINTER_TYPE: 'mouse',\n    events: [\n      'mousedown',\n      'mousemove',\n      'mouseup',\n      'mouseover',\n      'mouseout'\n    ],\n    register: function(target) {\n      dispatcher.listen(target, this.events);\n    },\n    unregister: function(target) {\n      dispatcher.unlisten(target, this.events);\n    },\n    lastTouches: [],\n\n    // collide with the global mouse listener\n    isEventSimulatedFromTouch: function(inEvent) {\n      var lts = this.lastTouches;\n      var x = inEvent.clientX;\n      var y = inEvent.clientY;\n      for (var i = 0, l = lts.length, t; i < l && (t = lts[i]); i++) {\n\n        // simulated mouse events will be swallowed near a primary touchend\n        var dx = Math.abs(x - t.x);\n        var dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {\n          return true;\n        }\n      }\n    },\n    prepareEvent: function(inEvent) {\n      var e = dispatcher.cloneEvent(inEvent);\n\n      // forward mouse preventDefault\n      var pd = e.preventDefault;\n      e.preventDefault = function() {\n        inEvent.preventDefault();\n        pd();\n      };\n      e.pointerId = this.POINTER_ID;\n      e.isPrimary = true;\n      e.pointerType = this.POINTER_TYPE;\n      return e;\n    },\n    prepareButtonsForMove: function(e, inEvent) {\n      var p = pointermap.get(this.POINTER_ID);\n\n      // Update buttons state after possible out-of-document mouseup.\n      if (inEvent.which === 0 || !p) {\n        e.buttons = 0;\n      } else {\n        e.buttons = p.buttons;\n      }\n      inEvent.buttons = e.buttons;\n    },\n    mousedown: function(inEvent) {\n      if (!this.isEventSimulatedFromTouch(inEvent)) {\n        var p = pointermap.get(this.POINTER_ID);\n        var e = this.prepareEvent(inEvent);\n        if (!HAS_BUTTONS) {\n          e.buttons = BUTTON_TO_BUTTONS[e.button];\n          if (p) { e.buttons |= p.buttons; }\n          inEvent.buttons = e.buttons;\n        }\n        pointermap.set(this.POINTER_ID, inEvent);\n        if (!p || p.buttons === 0) {\n          dispatcher.down(e);\n        } else {\n          dispatcher.move(e);\n        }\n      }\n    },\n    mousemove: function(inEvent) {\n      if (!this.isEventSimulatedFromTouch(inEvent)) {\n        var e = this.prepareEvent(inEvent);\n        if (!HAS_BUTTONS) { this.prepareButtonsForMove(e, inEvent); }\n        e.button = -1;\n        pointermap.set(this.POINTER_ID, inEvent);\n        dispatcher.move(e);\n      }\n    },\n    mouseup: function(inEvent) {\n      if (!this.isEventSimulatedFromTouch(inEvent)) {\n        var p = pointermap.get(this.POINTER_ID);\n        var e = this.prepareEvent(inEvent);\n        if (!HAS_BUTTONS) {\n          var up = BUTTON_TO_BUTTONS[e.button];\n\n          // Produces wrong state of buttons in Browsers without `buttons` support\n          // when a mouse button that was pressed outside the document is released\n          // inside and other buttons are still pressed down.\n          e.buttons = p ? p.buttons & ~up : 0;\n          inEvent.buttons = e.buttons;\n        }\n        pointermap.set(this.POINTER_ID, inEvent);\n\n        // Support: Firefox <=44 only\n        // FF Ubuntu includes the lifted button in the `buttons` property on\n        // mouseup.\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1223366\n        e.buttons &= ~BUTTON_TO_BUTTONS[e.button];\n        if (e.buttons === 0) {\n          dispatcher.up(e);\n        } else {\n          dispatcher.move(e);\n        }\n      }\n    },\n    mouseover: function(inEvent) {\n      if (!this.isEventSimulatedFromTouch(inEvent)) {\n        var e = this.prepareEvent(inEvent);\n        if (!HAS_BUTTONS) { this.prepareButtonsForMove(e, inEvent); }\n        e.button = -1;\n        pointermap.set(this.POINTER_ID, inEvent);\n        dispatcher.enterOver(e);\n      }\n    },\n    mouseout: function(inEvent) {\n      if (!this.isEventSimulatedFromTouch(inEvent)) {\n        var e = this.prepareEvent(inEvent);\n        if (!HAS_BUTTONS) { this.prepareButtonsForMove(e, inEvent); }\n        e.button = -1;\n        dispatcher.leaveOut(e);\n      }\n    },\n    cancel: function(inEvent) {\n      var e = this.prepareEvent(inEvent);\n      dispatcher.cancel(e);\n      this.deactivateMouse();\n    },\n    deactivateMouse: function() {\n      pointermap.delete(this.POINTER_ID);\n    }\n  };\n\n  var captureInfo = dispatcher.captureInfo;\n  var findTarget = targeting.findTarget.bind(targeting);\n  var allShadows = targeting.allShadows.bind(targeting);\n  var pointermap$1 = dispatcher.pointermap;\n\n  // This should be long enough to ignore compat mouse events made by touch\n  var DEDUP_TIMEOUT = 2500;\n  var CLICK_COUNT_TIMEOUT = 200;\n  var ATTRIB = 'touch-action';\n  var INSTALLER;\n\n  // handler block for native touch events\n  var touchEvents = {\n    events: [\n      'touchstart',\n      'touchmove',\n      'touchend',\n      'touchcancel'\n    ],\n    register: function(target) {\n      INSTALLER.enableOnSubtree(target);\n    },\n    unregister: function() {\n\n      // TODO(dfreedman): is it worth it to disconnect the MO?\n    },\n    elementAdded: function(el) {\n      var a = el.getAttribute(ATTRIB);\n      var st = this.touchActionToScrollType(a);\n      if (st) {\n        el._scrollType = st;\n        dispatcher.listen(el, this.events);\n\n        // set touch-action on shadows as well\n        allShadows(el).forEach(function(s) {\n          s._scrollType = st;\n          dispatcher.listen(s, this.events);\n        }, this);\n      }\n    },\n    elementRemoved: function(el) {\n      el._scrollType = undefined;\n      dispatcher.unlisten(el, this.events);\n\n      // remove touch-action from shadow\n      allShadows(el).forEach(function(s) {\n        s._scrollType = undefined;\n        dispatcher.unlisten(s, this.events);\n      }, this);\n    },\n    elementChanged: function(el, oldValue) {\n      var a = el.getAttribute(ATTRIB);\n      var st = this.touchActionToScrollType(a);\n      var oldSt = this.touchActionToScrollType(oldValue);\n\n      // simply update scrollType if listeners are already established\n      if (st && oldSt) {\n        el._scrollType = st;\n        allShadows(el).forEach(function(s) {\n          s._scrollType = st;\n        }, this);\n      } else if (oldSt) {\n        this.elementRemoved(el);\n      } else if (st) {\n        this.elementAdded(el);\n      }\n    },\n    scrollTypes: {\n      EMITTER: 'none',\n      XSCROLLER: 'pan-x',\n      YSCROLLER: 'pan-y',\n      SCROLLER: /^(?:pan-x pan-y)|(?:pan-y pan-x)|auto$/\n    },\n    touchActionToScrollType: function(touchAction) {\n      var t = touchAction;\n      var st = this.scrollTypes;\n      if (t === 'none') {\n        return 'none';\n      } else if (t === st.XSCROLLER) {\n        return 'X';\n      } else if (t === st.YSCROLLER) {\n        return 'Y';\n      } else if (st.SCROLLER.exec(t)) {\n        return 'XY';\n      }\n    },\n    POINTER_TYPE: 'touch',\n    firstTouch: null,\n    isPrimaryTouch: function(inTouch) {\n      return this.firstTouch === inTouch.identifier;\n    },\n    setPrimaryTouch: function(inTouch) {\n\n      // set primary touch if there no pointers, or the only pointer is the mouse\n      if (pointermap$1.size === 0 || (pointermap$1.size === 1 && pointermap$1.has(1))) {\n        this.firstTouch = inTouch.identifier;\n        this.firstXY = { X: inTouch.clientX, Y: inTouch.clientY };\n        this.scrolling = false;\n        this.cancelResetClickCount();\n      }\n    },\n    removePrimaryPointer: function(inPointer) {\n      if (inPointer.isPrimary) {\n        this.firstTouch = null;\n        this.firstXY = null;\n        this.resetClickCount();\n      }\n    },\n    clickCount: 0,\n    resetId: null,\n    resetClickCount: function() {\n      var fn = function() {\n        this.clickCount = 0;\n        this.resetId = null;\n      }.bind(this);\n      this.resetId = setTimeout(fn, CLICK_COUNT_TIMEOUT);\n    },\n    cancelResetClickCount: function() {\n      if (this.resetId) {\n        clearTimeout(this.resetId);\n      }\n    },\n    typeToButtons: function(type) {\n      var ret = 0;\n      if (type === 'touchstart' || type === 'touchmove') {\n        ret = 1;\n      }\n      return ret;\n    },\n    touchToPointer: function(inTouch) {\n      var cte = this.currentTouchEvent;\n      var e = dispatcher.cloneEvent(inTouch);\n\n      // We reserve pointerId 1 for Mouse.\n      // Touch identifiers can start at 0.\n      // Add 2 to the touch identifier for compatibility.\n      var id = e.pointerId = inTouch.identifier + 2;\n      e.target = captureInfo[id] || findTarget(e);\n      e.bubbles = true;\n      e.cancelable = true;\n      e.detail = this.clickCount;\n      e.button = 0;\n      e.buttons = this.typeToButtons(cte.type);\n      e.width = inTouch.radiusX || inTouch.webkitRadiusX || 0;\n      e.height = inTouch.radiusY || inTouch.webkitRadiusY || 0;\n      e.pressure = inTouch.force || inTouch.webkitForce || 0.5;\n      e.isPrimary = this.isPrimaryTouch(inTouch);\n      e.pointerType = this.POINTER_TYPE;\n\n      // forward modifier keys\n      e.altKey = cte.altKey;\n      e.ctrlKey = cte.ctrlKey;\n      e.metaKey = cte.metaKey;\n      e.shiftKey = cte.shiftKey;\n\n      // forward touch preventDefaults\n      var self = this;\n      e.preventDefault = function() {\n        self.scrolling = false;\n        self.firstXY = null;\n        cte.preventDefault();\n      };\n      return e;\n    },\n    processTouches: function(inEvent, inFunction) {\n      var tl = inEvent.changedTouches;\n      this.currentTouchEvent = inEvent;\n      for (var i = 0, t; i < tl.length; i++) {\n        t = tl[i];\n        inFunction.call(this, this.touchToPointer(t));\n      }\n    },\n\n    // For single axis scrollers, determines whether the element should emit\n    // pointer events or behave as a scroller\n    shouldScroll: function(inEvent) {\n      if (this.firstXY) {\n        var ret;\n        var scrollAxis = inEvent.currentTarget._scrollType;\n        if (scrollAxis === 'none') {\n\n          // this element is a touch-action: none, should never scroll\n          ret = false;\n        } else if (scrollAxis === 'XY') {\n\n          // this element should always scroll\n          ret = true;\n        } else {\n          var t = inEvent.changedTouches[0];\n\n          // check the intended scroll axis, and other axis\n          var a = scrollAxis;\n          var oa = scrollAxis === 'Y' ? 'X' : 'Y';\n          var da = Math.abs(t['client' + a] - this.firstXY[a]);\n          var doa = Math.abs(t['client' + oa] - this.firstXY[oa]);\n\n          // if delta in the scroll axis > delta other axis, scroll instead of\n          // making events\n          ret = da >= doa;\n        }\n        this.firstXY = null;\n        return ret;\n      }\n    },\n    findTouch: function(inTL, inId) {\n      for (var i = 0, l = inTL.length, t; i < l && (t = inTL[i]); i++) {\n        if (t.identifier === inId) {\n          return true;\n        }\n      }\n    },\n\n    // In some instances, a touchstart can happen without a touchend. This\n    // leaves the pointermap in a broken state.\n    // Therefore, on every touchstart, we remove the touches that did not fire a\n    // touchend event.\n    // To keep state globally consistent, we fire a\n    // pointercancel for this \"abandoned\" touch\n    vacuumTouches: function(inEvent) {\n      var tl = inEvent.touches;\n\n      // pointermap.size should be < tl.length here, as the touchstart has not\n      // been processed yet.\n      if (pointermap$1.size >= tl.length) {\n        var d = [];\n        pointermap$1.forEach(function(value, key) {\n\n          // Never remove pointerId == 1, which is mouse.\n          // Touch identifiers are 2 smaller than their pointerId, which is the\n          // index in pointermap.\n          if (key !== 1 && !this.findTouch(tl, key - 2)) {\n            var p = value.out;\n            d.push(p);\n          }\n        }, this);\n        d.forEach(this.cancelOut, this);\n      }\n    },\n    touchstart: function(inEvent) {\n      this.vacuumTouches(inEvent);\n      this.setPrimaryTouch(inEvent.changedTouches[0]);\n      this.dedupSynthMouse(inEvent);\n      if (!this.scrolling) {\n        this.clickCount++;\n        this.processTouches(inEvent, this.overDown);\n      }\n    },\n    overDown: function(inPointer) {\n      pointermap$1.set(inPointer.pointerId, {\n        target: inPointer.target,\n        out: inPointer,\n        outTarget: inPointer.target\n      });\n      dispatcher.enterOver(inPointer);\n      dispatcher.down(inPointer);\n    },\n    touchmove: function(inEvent) {\n      if (!this.scrolling) {\n        if (this.shouldScroll(inEvent)) {\n          this.scrolling = true;\n          this.touchcancel(inEvent);\n        } else {\n          inEvent.preventDefault();\n          this.processTouches(inEvent, this.moveOverOut);\n        }\n      }\n    },\n    moveOverOut: function(inPointer) {\n      var event = inPointer;\n      var pointer = pointermap$1.get(event.pointerId);\n\n      // a finger drifted off the screen, ignore it\n      if (!pointer) {\n        return;\n      }\n      var outEvent = pointer.out;\n      var outTarget = pointer.outTarget;\n      dispatcher.move(event);\n      if (outEvent && outTarget !== event.target) {\n        outEvent.relatedTarget = event.target;\n        event.relatedTarget = outTarget;\n\n        // recover from retargeting by shadow\n        outEvent.target = outTarget;\n        if (event.target) {\n          dispatcher.leaveOut(outEvent);\n          dispatcher.enterOver(event);\n        } else {\n\n          // clean up case when finger leaves the screen\n          event.target = outTarget;\n          event.relatedTarget = null;\n          this.cancelOut(event);\n        }\n      }\n      pointer.out = event;\n      pointer.outTarget = event.target;\n    },\n    touchend: function(inEvent) {\n      this.dedupSynthMouse(inEvent);\n      this.processTouches(inEvent, this.upOut);\n    },\n    upOut: function(inPointer) {\n      if (!this.scrolling) {\n        dispatcher.up(inPointer);\n        dispatcher.leaveOut(inPointer);\n      }\n      this.cleanUpPointer(inPointer);\n    },\n    touchcancel: function(inEvent) {\n      this.processTouches(inEvent, this.cancelOut);\n    },\n    cancelOut: function(inPointer) {\n      dispatcher.cancel(inPointer);\n      dispatcher.leaveOut(inPointer);\n      this.cleanUpPointer(inPointer);\n    },\n    cleanUpPointer: function(inPointer) {\n      pointermap$1.delete(inPointer.pointerId);\n      this.removePrimaryPointer(inPointer);\n    },\n\n    // prevent synth mouse events from creating pointer events\n    dedupSynthMouse: function(inEvent) {\n      var lts = mouseEvents.lastTouches;\n      var t = inEvent.changedTouches[0];\n\n      // only the primary finger will synth mouse events\n      if (this.isPrimaryTouch(t)) {\n\n        // remember x/y of last touch\n        var lt = { x: t.clientX, y: t.clientY };\n        lts.push(lt);\n        var fn = (function(lts, lt) {\n          var i = lts.indexOf(lt);\n          if (i > -1) {\n            lts.splice(i, 1);\n          }\n        }).bind(null, lts, lt);\n        setTimeout(fn, DEDUP_TIMEOUT);\n      }\n    }\n  };\n\n  INSTALLER = new Installer(touchEvents.elementAdded, touchEvents.elementRemoved,\n    touchEvents.elementChanged, touchEvents);\n\n  var pointermap$2 = dispatcher.pointermap;\n  var HAS_BITMAP_TYPE = window.MSPointerEvent &&\n    typeof window.MSPointerEvent.MSPOINTER_TYPE_MOUSE === 'number';\n  var msEvents = {\n    events: [\n      'MSPointerDown',\n      'MSPointerMove',\n      'MSPointerUp',\n      'MSPointerOut',\n      'MSPointerOver',\n      'MSPointerCancel',\n      'MSGotPointerCapture',\n      'MSLostPointerCapture'\n    ],\n    register: function(target) {\n      dispatcher.listen(target, this.events);\n    },\n    unregister: function(target) {\n      dispatcher.unlisten(target, this.events);\n    },\n    POINTER_TYPES: [\n      '',\n      'unavailable',\n      'touch',\n      'pen',\n      'mouse'\n    ],\n    prepareEvent: function(inEvent) {\n      var e = inEvent;\n      if (HAS_BITMAP_TYPE) {\n        e = dispatcher.cloneEvent(inEvent);\n        e.pointerType = this.POINTER_TYPES[inEvent.pointerType];\n      }\n      return e;\n    },\n    cleanup: function(id) {\n      pointermap$2.delete(id);\n    },\n    MSPointerDown: function(inEvent) {\n      pointermap$2.set(inEvent.pointerId, inEvent);\n      var e = this.prepareEvent(inEvent);\n      dispatcher.down(e);\n    },\n    MSPointerMove: function(inEvent) {\n      var e = this.prepareEvent(inEvent);\n      dispatcher.move(e);\n    },\n    MSPointerUp: function(inEvent) {\n      var e = this.prepareEvent(inEvent);\n      dispatcher.up(e);\n      this.cleanup(inEvent.pointerId);\n    },\n    MSPointerOut: function(inEvent) {\n      var e = this.prepareEvent(inEvent);\n      dispatcher.leaveOut(e);\n    },\n    MSPointerOver: function(inEvent) {\n      var e = this.prepareEvent(inEvent);\n      dispatcher.enterOver(e);\n    },\n    MSPointerCancel: function(inEvent) {\n      var e = this.prepareEvent(inEvent);\n      dispatcher.cancel(e);\n      this.cleanup(inEvent.pointerId);\n    },\n    MSLostPointerCapture: function(inEvent) {\n      var e = dispatcher.makeEvent('lostpointercapture', inEvent);\n      dispatcher.dispatchEvent(e);\n    },\n    MSGotPointerCapture: function(inEvent) {\n      var e = dispatcher.makeEvent('gotpointercapture', inEvent);\n      dispatcher.dispatchEvent(e);\n    }\n  };\n\n  function applyPolyfill() {\n\n    // only activate if this platform does not have pointer events\n    if (!window.PointerEvent) {\n      window.PointerEvent = PointerEvent;\n\n      if (window.navigator.msPointerEnabled) {\n        var tp = window.navigator.msMaxTouchPoints;\n        Object.defineProperty(window.navigator, 'maxTouchPoints', {\n          value: tp,\n          enumerable: true\n        });\n        dispatcher.registerSource('ms', msEvents);\n      } else {\n        dispatcher.registerSource('mouse', mouseEvents);\n        if (window.ontouchstart !== undefined) {\n          dispatcher.registerSource('touch', touchEvents);\n        }\n      }\n\n      dispatcher.register(document);\n    }\n  }\n\n  var n = window.navigator;\n  var s;\n  var r;\n  function assertActive(id) {\n    if (!dispatcher.pointermap.has(id)) {\n      var error = new Error('InvalidPointerId');\n      error.name = 'InvalidPointerId';\n      throw error;\n    }\n  }\n  function assertConnected(elem) {\n    if (!elem.ownerDocument.contains(elem)) {\n      var error = new Error('InvalidStateError');\n      error.name = 'InvalidStateError';\n      throw error;\n    }\n  }\n  function inActiveButtonState(id) {\n    var p = dispatcher.pointermap.get(id);\n    return p.buttons !== 0;\n  }\n  if (n.msPointerEnabled) {\n    s = function(pointerId) {\n      assertActive(pointerId);\n      assertConnected(this);\n      if (inActiveButtonState(pointerId)) {\n        this.msSetPointerCapture(pointerId);\n      }\n    };\n    r = function(pointerId) {\n      assertActive(pointerId);\n      this.msReleasePointerCapture(pointerId);\n    };\n  } else {\n    s = function setPointerCapture(pointerId) {\n      assertActive(pointerId);\n      assertConnected(this);\n      if (inActiveButtonState(pointerId)) {\n        dispatcher.setCapture(pointerId, this);\n      }\n    };\n    r = function releasePointerCapture(pointerId) {\n      assertActive(pointerId);\n      dispatcher.releaseCapture(pointerId, this);\n    };\n  }\n\n  function applyPolyfill$1() {\n    if (window.Element && !Element.prototype.setPointerCapture) {\n      Object.defineProperties(Element.prototype, {\n        'setPointerCapture': {\n          value: s\n        },\n        'releasePointerCapture': {\n          value: r\n        }\n      });\n    }\n  }\n\n  applyAttributeStyles();\n  applyPolyfill();\n  applyPolyfill$1();\n\n  var pointerevents = {\n    dispatcher: dispatcher,\n    Installer: Installer,\n    PointerEvent: PointerEvent,\n    PointerMap: PointerMap,\n    targetFinding: targeting\n  };\n\n  return pointerevents;\n\n}));"],"sourceRoot":""}